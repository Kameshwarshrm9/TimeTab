generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                    Int                    @id @default(autoincrement())
  name                  String
  email                 String?                @unique
  department            String?                // Made optional
  subjects              TeacherSubject[]       // Removed onDelete: Cascade
  timetable             Timetable[]            // Removed onDelete: Cascade
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Teacher") // Removed onDelete: Cascade
}

model Subject {
  id                    Int                    @id @default(autoincrement())
  name                  String
  code                  String                 @unique
  isLab                 Boolean                @default(false)
  teachers              TeacherSubject[]       // many-to-many with teachers
  branchSubjects        BranchSubject[]        // subjects for branches
  timetable             Timetable[]            // scheduled slots
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Subject")
}

model Branch {
  id                    Int                    @id @default(autoincrement())
  name                  String                 // e.g., CSE, EE
  semester              Int                    // 1, 2, 3...
  subjects              BranchSubject[]        // subjects assigned to this branch
  timetable             Timetable[]            // timetable for this branch
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Branch")
  
  @@unique([name, semester]) // Ensure name and semester combination is unique
}

model TeacherSubject {
  teacherId Int
  subjectId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade) // Added onDelete: Cascade

  @@id([teacherId, subjectId])
}

model BranchSubject {
  branchId  Int
  subjectId Int
  frequency Int
  branch    Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)  // Added onDelete: Cascade
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade) // Added onDelete: Cascade

  @@id([branchId, subjectId])
}

model BranchSubjectTeacher {
  id        Int @id @default(autoincrement())
  branchId  Int
  subjectId Int
  teacherId Int

  branch  Branch  @relation("BranchSubjectTeacher_Branch", fields: [branchId], references: [id], onDelete: Cascade)   // Added onDelete: Cascade
  subject Subject @relation("BranchSubjectTeacher_Subject", fields: [subjectId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  teacher Teacher @relation("BranchSubjectTeacher_Teacher", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([branchId, subjectId])
}

model Timetable {
  id        Int    @id @default(autoincrement())
  branchId  Int
  day       String 
  timeSlot  String 
  subjectId Int
  teacherId Int

  branch  Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)   // Added onDelete: Cascade
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([branchId, day, timeSlot])
  @@unique([teacherId, day, timeSlot])
}