 // This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                    Int                    @id @default(autoincrement())
  name                  String
  email                 String?                @unique
  subjects              TeacherSubject[] // many-to-many with subjects
  timetable             Timetable[] // one-to-many with timetable
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Teacher")
}

model Subject {
  id                    Int                    @id @default(autoincrement())
  name                  String
  code                  String                 @unique
  isLab                 Boolean                @default(false)
  teachers              TeacherSubject[] // many-to-many with teachrs
  branchSubjects        BranchSubject[] // subjects for braches
  timetable             Timetable[] // scheduled slots
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Subject")
}

model Branch {
  id                    Int                    @id @default(autoincrement())
  name                  String // e.g., CSE, EE
  semester              Int // 1, 2, 3...
  subjects              BranchSubject[] // subjects assigned to this branch
  timetable             Timetable[] // timetable for this branch
  branchSubjectTeachers BranchSubjectTeacher[] @relation("BranchSubjectTeacher_Branch")
}

model TeacherSubject {
  teacherId Int
  subjectId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([teacherId, subjectId])
}

model BranchSubject {
  branchId  Int
  subjectId Int
  frequency Int
  branch    Branch  @relation(fields: [branchId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([branchId, subjectId])
}

model BranchSubjectTeacher {
  id        Int @id @default(autoincrement())
  branchId  Int
  subjectId Int
  teacherId Int

  branch  Branch  @relation("BranchSubjectTeacher_Branch", fields: [branchId], references: [id])
  subject Subject @relation("BranchSubjectTeacher_Subject", fields: [subjectId], references: [id])
  teacher Teacher @relation("BranchSubjectTeacher_Teacher", fields: [teacherId], references: [id])

  @@unique([branchId, subjectId])
}

model Timetable {
  id        Int    @id @default(autoincrement())
  branchId  Int
  day       String 
  timeSlot  String 
  subjectId Int
  teacherId Int

  branch  Branch  @relation(fields: [branchId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([branchId, day, timeSlot])
  @@unique([teacherId, day, timeSlot])
}
